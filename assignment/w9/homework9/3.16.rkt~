#lang sicp

(define (count-pairs x)
  (if (not (pair? x))
      0
      (+ (count-pairs (car x))
         (count-pairs (cdr x))
         1)))

;the procedure is not correct when
;the same pair is pointed many times.


(define x '(1))

;3 pair->count7
(define y
  (let ((y (cons (cons x 'null) 'null)))
    (set-cdr! (car y) x)
    (set-cdr! y (car y))
    y))
y
(eq? (car y) (cdr y))
(count-pairs y)




;3 pair->count4
(define z
  (let ((z (cons '() (cons x '()))))
    (set-car! z (car (cdr z)))
    z))

z
(eq? (car z) (cadr z))
(count-pairs z)