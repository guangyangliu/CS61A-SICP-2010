#lang simply-scheme


(+ (- 4.7 (* 0.05 4.7)) (- 6.8 (* 0.1 6.8)))
(+ (+ 4.7 (* 0.05 4.7)) (+ 6.8 (* 0.1 6.8)))




(/ 1 (+ (/ 1 (- 4.7 (* 0.05 4.7))) (/ 1 (- 6.8 (* 0.1 6.8)))))

(/ 1 (+ (/ 1 (+ 4.7 (* 0.05 4.7))) (/ 1(+ 6.8 (* 0.1 6.8)))))


(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (if (member? 0 y) 'error
      (mul-interval x
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound y))))))

(define (upper-bound x)
  (last x))

(define (lower-bound x)
  (first x))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))

(define (make-interval a b) (cons a b))

(sub-interval '(1 2) '(3 4))

