#lang simply-scheme
(define (substitute lists oldword newword)
  (define (subword alist)
    (cond ((null? alist) '())
          ((list? alist)
           (cond
             ((equal? (first alist) oldword) (se newword (subword (bf alist))))
             (else (cons (first alist) (subword (bf alist))))))
          ((word? alist)
           (cond
             ((equal? alist oldword) (word newword))
             (else (word alist))))))
  (map subword lists))



(substitute '((lead guitar) (bass guitar) (rhythm guitar) drums) 'guitar 'axe)
;((lead axe) (bass axe) (rhythm axe) drums)




(define (substitute2 alist listoldwords listnewwords)
  (define (substitute1 oldwords newwords)
    (substitute alist oldwords newwords))
  (map substitute1 listoldwords listnewwords))

(trace substitute2)
(substitute2 '((4 calling birds) (3 french hens) (2 turtle doves)) '(1 2 3 4) '(one two three four))
;((four calling birds) (three french hens) (two turtle doves))

