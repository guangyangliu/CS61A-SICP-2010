#lang simply-scheme
(define (square x) (* x x))

(define (square-list items)
  (map square items))

(square-list (list 1 2 3 4))

(define (square-tree tree)
  (cond ((null? tree) null)
        ((pair? tree)
         (cons (square-tree (car tree))
               (square-tree (cdr tree))))
        (else (square tree))))

(define (square-treemap tree)
  (if (list? tree)
      (cons (square (car tree))
            (map square-treemap (cdr tree)))
      (square tree)))


 
(define tree  (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))

tree
(square-tree tree)
(square-treemap tree)
(trace square-treemap)